# Somethings to keep in mind.
# -d flag necesary. All the containers start in ditacched mode.
# --network flag is not necessary. Docker compose creates an enviroment where all these containers will be hosted (We can specify it if we want).

# ----------- Docker compose ----------
version: "3.8"  # Docker compose version.
services:       # Services are the Docker containers and their names.

  # -------- Mongo Container -----------
  mongo_container:      # The custom Mongo container created (Service name).
    container_name: mongo_container
    image: "mongo:latest"       # Image name.
    volumes:                    # Container volume.
      - data:/data/db
    env_file:                   # Enviroment variables (are saved within .env files).
      - ./env/mongo.env
  # ------------------------------------
  # -------- Node Container -----------
  node_container:       # The custom Node container created.
    container_name: node_container
    build: ./backend    # The shortest way.
    # build:
      # context: ./backend      # Here we specified the root folder.
      # dockerfile: Dockerfile      # Here we specified the Dockerfile's name.
      # args: 
    ports:
      - "80:80"
    volumes:
      - ./backend/:/app
    env_file:                   # Enviroment variables (are saved within .env files).
      - ./env/node.env
    depends_on:                 # It depends from other services (container's name) (optional).
      - mongo_container
  # ------------------------------------
  # -------- React Container -----------
  react_container:      # The custom Mongo container created.
    container_name: react_container
    build: ./frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/:/app
    stdin_open: true
    tty: true
    depends_on:
      - node_container
  # ------------------------------------

# Requierements for Docker. --------
volumes:        # We need to specify the volume's names in this section (same level as services).
  data:         # Same name as we have it in our service (mongo_container service).
